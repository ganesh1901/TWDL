# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ViewController

import flatbuffers

class IP_RRU(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIP_RRU(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IP_RRU()
        x.Init(buf, n + offset)
        return x

    # IP_RRU
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IP_RRU
    def IType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # IP_RRU
    def Slot(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # IP_RRU
    def Port(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # IP_RRU
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # IP_RRU
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # IP_RRU
    def Value2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def IP_RRUStart(builder): builder.StartObject(6)
def IP_RRUAddIType(builder, iType): builder.PrependInt8Slot(0, iType, 1)
def IP_RRUAddSlot(builder, slot): builder.PrependUint16Slot(1, slot, 0)
def IP_RRUAddPort(builder, port): builder.PrependUint16Slot(2, port, 0)
def IP_RRUAddChannel(builder, channel): builder.PrependUint16Slot(3, channel, 0)
def IP_RRUAddValue(builder, value): builder.PrependInt16Slot(4, value, 0)
def IP_RRUAddValue2(builder, value2): builder.PrependFloat32Slot(5, value2, 0.0)
def IP_RRUEnd(builder): return builder.EndObject()
