# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ViewController

import flatbuffers

class USB_RRU(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUSB_RRU(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = USB_RRU()
        x.Init(buf, n + offset)
        return x

    # USB_RRU
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # USB_RRU
    def IType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 1

    # USB_RRU
    def Channel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # USB_RRU
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def USB_RRUStart(builder): builder.StartObject(3)
def USB_RRUAddIType(builder, iType): builder.PrependInt8Slot(0, iType, 1)
def USB_RRUAddChannel(builder, channel): builder.PrependInt16Slot(1, channel, 0)
def USB_RRUAddValue(builder, value): builder.PrependInt16Slot(2, value, 0)
def USB_RRUEnd(builder): return builder.EndObject()
