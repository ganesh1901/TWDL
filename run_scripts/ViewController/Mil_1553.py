# automatically generated by the FlatBuffers compiler, do not modify

# namespace: ViewController

import flatbuffers

class Mil_1553(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMil_1553(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Mil_1553()
        x.Init(buf, n + offset)
        return x

    # Mil_1553
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Mil_1553
    def Rt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Mil_1553
    def Subaddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Mil_1553
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Mil_1553
    def Wordcount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # Mil_1553
    def Payload(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Mil_1553
    def PayloadAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Mil_1553
    def PayloadLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Mil_1553
    def Frequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def Mil_1553Start(builder): builder.StartObject(6)
def Mil_1553AddRt(builder, rt): builder.PrependUint16Slot(0, rt, 0)
def Mil_1553AddSubaddress(builder, subaddress): builder.PrependUint16Slot(1, subaddress, 0)
def Mil_1553AddDirection(builder, direction): builder.PrependUint16Slot(2, direction, 0)
def Mil_1553AddWordcount(builder, wordcount): builder.PrependUint16Slot(3, wordcount, 0)
def Mil_1553AddPayload(builder, payload): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(payload), 0)
def Mil_1553StartPayloadVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def Mil_1553AddFrequency(builder, frequency): builder.PrependInt16Slot(5, frequency, 0)
def Mil_1553End(builder): return builder.EndObject()
